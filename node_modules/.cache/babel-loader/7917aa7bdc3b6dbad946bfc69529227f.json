{"ast":null,"code":"import * as e from \"react\";\nfunction t() {\n  return t = Object.assign ? Object.assign.bind() : function (e) {\n    for (var t = 1; t < arguments.length; t++) {\n      var n = arguments[t];\n      for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);\n    }\n    return e;\n  }, t.apply(this, arguments);\n}\nconst n = [\"children\", \"options\"],\n  r = {\n    blockQuote: \"0\",\n    breakLine: \"1\",\n    breakThematic: \"2\",\n    codeBlock: \"3\",\n    codeFenced: \"4\",\n    codeInline: \"5\",\n    footnote: \"6\",\n    footnoteReference: \"7\",\n    gfmTask: \"8\",\n    heading: \"9\",\n    headingSetext: \"10\",\n    htmlBlock: \"11\",\n    htmlComment: \"12\",\n    htmlSelfClosing: \"13\",\n    image: \"14\",\n    link: \"15\",\n    linkAngleBraceStyleDetector: \"16\",\n    linkBareUrlDetector: \"17\",\n    linkMailtoDetector: \"18\",\n    newlineCoalescer: \"19\",\n    orderedList: \"20\",\n    paragraph: \"21\",\n    ref: \"22\",\n    refImage: \"23\",\n    refLink: \"24\",\n    table: \"25\",\n    tableSeparator: \"26\",\n    text: \"27\",\n    textBolded: \"28\",\n    textEmphasized: \"29\",\n    textEscaped: \"30\",\n    textMarked: \"31\",\n    textStrikethroughed: \"32\",\n    unorderedList: \"33\"\n  };\nvar i;\n!function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(i || (i = {}));\nconst l = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce((e, t) => (e[t.toLowerCase()] = t, e), {\n    for: \"htmlFor\"\n  }),\n  a = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  o = [\"style\", \"script\"],\n  c = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  s = /mailto:/i,\n  d = /\\n{2,}$/,\n  u = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/,\n  p = /^ *> ?/gm,\n  f = /^ {2,}\\n/,\n  h = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  m = /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/,\n  g = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  y = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  k = /^(?:\\n *)*\\n/,\n  x = /\\r\\n?/g,\n  b = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/,\n  v = /^\\[\\^([^\\]]+)]/,\n  S = /\\f/g,\n  E = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,\n  $ = /^\\s*?\\[(x|\\s)\\]/,\n  w = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  C = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  z = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  L = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i,\n  A = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  T = /^<!--[\\s\\S]*?(?:-->)/,\n  O = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  B = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  M = /^\\{.*\\}$/,\n  R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  I = /^<([^ >]+@[^ >]+)>/,\n  U = /^<([^ >]+:\\/[^ >]+)>/,\n  D = /-([a-z])?/gi,\n  j = /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/,\n  N = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  H = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  F = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  P = /(\\[|\\])/g,\n  _ = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  W = /\\t/g,\n  G = /(^ *\\||\\| *$)/g,\n  Z = /^ *:-+: *$/,\n  q = /^ *:-+ *$/,\n  Q = /^ *-+: *$/,\n  V = \"((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)\",\n  X = new RegExp(`^([*_])\\\\1${V}\\\\1\\\\1(?!\\\\1)`),\n  J = new RegExp(`^([*_])${V}\\\\1(?!\\\\1|\\\\w)`),\n  K = new RegExp(`^==${V}==`),\n  Y = new RegExp(`^~~${V}~~`),\n  ee = /^\\\\([^0-9A-Za-z\\s])/,\n  te = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  ne = /^\\n+/,\n  re = /^([ \\t]*)/,\n  ie = /\\\\([^\\\\])/g,\n  le = / *\\n+$/,\n  ae = /(?:^|\\n)( *)$/,\n  oe = \"(?:\\\\d+\\\\.)\",\n  ce = \"(?:[*+-])\";\nfunction se(e) {\n  return \"( *)(\" + (1 === e ? oe : ce) + \") +\";\n}\nconst de = se(1),\n  ue = se(2);\nfunction pe(e) {\n  return new RegExp(\"^\" + (1 === e ? de : ue));\n}\nconst fe = pe(1),\n  he = pe(2);\nfunction me(e) {\n  return new RegExp(\"^\" + (1 === e ? de : ue) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === e ? oe : ce) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nconst ge = me(1),\n  ye = me(2);\nfunction ke(e) {\n  const t = 1 === e ? oe : ce;\n  return new RegExp(\"^( *)(\" + t + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + t + \" (?!\" + t + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nconst xe = ke(1),\n  be = ke(2);\nfunction ve(e, t) {\n  const n = 1 === t,\n    i = n ? xe : be,\n    l = n ? ge : ye,\n    a = n ? fe : he;\n  return {\n    match(e, t, n) {\n      const r = ae.exec(n);\n      return r && (t.list || !t.inline && !t.simple) ? i.exec(e = r[1] + e) : null;\n    },\n    order: 1,\n    parse(e, t, r) {\n      const i = n ? +e[2] : void 0,\n        o = e[0].replace(d, \"\\n\").match(l);\n      let c = !1;\n      return {\n        items: o.map(function (e, n) {\n          const i = a.exec(e)[0].length,\n            l = new RegExp(\"^ {1,\" + i + \"}\", \"gm\"),\n            s = e.replace(l, \"\").replace(a, \"\"),\n            d = n === o.length - 1,\n            u = -1 !== s.indexOf(\"\\n\\n\") || d && c;\n          c = u;\n          const p = r.inline,\n            f = r.list;\n          let h;\n          r.list = !0, u ? (r.inline = !1, h = s.replace(le, \"\\n\\n\")) : (r.inline = !0, h = s.replace(le, \"\"));\n          const m = t(h, r);\n          return r.inline = p, r.list = f, m;\n        }),\n        ordered: n,\n        start: i\n      };\n    },\n    render: (t, n, i) => e(t.ordered ? \"ol\" : \"ul\", {\n      key: i.key,\n      start: t.type === r.orderedList ? t.start : void 0\n    }, t.items.map(function (t, r) {\n      return e(\"li\", {\n        key: r\n      }, n(t, i));\n    }))\n  };\n}\nconst Se = new RegExp(\"^\\\\[((?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*)\\\\]\\\\(\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  Ee = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  $e = [u, m, g, w, z, C, T, j, ge, xe, ye, be],\n  we = [...$e, /^[^\\n]+(?:  \\n|\\n{2,})/, L, B];\nfunction Ce(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction ze(e) {\n  return Q.test(e) ? \"right\" : Z.test(e) ? \"center\" : q.test(e) ? \"left\" : null;\n}\nfunction Le(e, t, n, i) {\n  const l = n.inTable;\n  n.inTable = !0;\n  let a = e.trim().split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/).reduce((e, l) => (\"|\" === l.trim() ? e.push(i ? {\n    type: r.tableSeparator\n  } : {\n    type: r.text,\n    text: l\n  }) : \"\" !== l && e.push.apply(e, t(l, n)), e), []);\n  n.inTable = l;\n  let o = [[]];\n  return a.forEach(function (e, t) {\n    e.type === r.tableSeparator ? 0 !== t && t !== a.length - 1 && o.push([]) : (e.type !== r.text || null != a[t + 1] && a[t + 1].type !== r.tableSeparator || (e.text = e.text.trimEnd()), o[o.length - 1].push(e));\n  }), o;\n}\nfunction Ae(e, t, n) {\n  n.inline = !0;\n  const i = e[2] ? e[2].replace(G, \"\").split(\"|\").map(ze) : [],\n    l = e[3] ? function (e, t, n) {\n      return e.trim().split(\"\\n\").map(function (e) {\n        return Le(e, t, n, !0);\n      });\n    }(e[3], t, n) : [],\n    a = Le(e[1], t, n, !!l.length);\n  return n.inline = !1, l.length ? {\n    align: i,\n    cells: l,\n    header: a,\n    type: r.table\n  } : {\n    children: a,\n    type: r.paragraph\n  };\n}\nfunction Te(e, t) {\n  return null == e.align[t] ? {} : {\n    textAlign: e.align[t]\n  };\n}\nfunction Oe(e) {\n  return function (t, n) {\n    return n.inline ? e.exec(t) : null;\n  };\n}\nfunction Be(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? e.exec(t) : null;\n  };\n}\nfunction Me(e) {\n  return function (t, n) {\n    return n.inline || n.simple ? null : e.exec(t);\n  };\n}\nfunction Re(e) {\n  return function (t) {\n    return e.exec(t);\n  };\n}\nfunction Ie(e, t, n) {\n  if (t.inline || t.simple) return null;\n  if (n && !n.endsWith(\"\\n\")) return null;\n  let r = \"\";\n  e.split(\"\\n\").every(e => !$e.some(t => t.test(e)) && (r += e + \"\\n\", e.trim()));\n  const i = r.trimEnd();\n  return \"\" == i ? null : [r, i];\n}\nfunction Ue(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return null;\n  } catch (e) {\n    return null;\n  }\n  return e;\n}\nfunction De(e) {\n  return e.replace(ie, \"$1\");\n}\nfunction je(e, t, n) {\n  const r = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !0, n.simple = !0;\n  const l = e(t, n);\n  return n.inline = r, n.simple = i, l;\n}\nfunction Ne(e, t, n) {\n  const r = n.inline || !1,\n    i = n.simple || !1;\n  n.inline = !1, n.simple = !0;\n  const l = e(t, n);\n  return n.inline = r, n.simple = i, l;\n}\nfunction He(e, t, n) {\n  const r = n.inline || !1;\n  n.inline = !1;\n  const i = e(t, n);\n  return n.inline = r, i;\n}\nconst Fe = (e, t, n) => ({\n  children: je(t, e[1], n)\n});\nfunction Pe() {\n  return {};\n}\nfunction _e() {\n  return null;\n}\nfunction We(...e) {\n  return e.filter(Boolean).join(\" \");\n}\nfunction Ge(e, t, n) {\n  let r = e;\n  const i = t.split(\".\");\n  for (; i.length && (r = r[i[0]], void 0 !== r);) i.shift();\n  return r || n;\n}\nfunction Ze(n = \"\", i = {}) {\n  function d(e, n, ...r) {\n    const l = Ge(i.overrides, `${e}.props`, {});\n    return i.createElement(function (e, t) {\n      const n = Ge(t, e);\n      return n ? \"function\" == typeof n || \"object\" == typeof n && \"render\" in n ? n : Ge(t, `${e}.component`, e) : e;\n    }(e, i.overrides), t({}, n, l, {\n      className: We(null == n ? void 0 : n.className, l.className) || void 0\n    }), ...r);\n  }\n  function G(t) {\n    t = t.replace(E, \"\");\n    let n = !1;\n    i.forceInline ? n = !0 : i.forceBlock || (n = !1 === _.test(t));\n    const r = le(ie(n ? t : `${t.trimEnd().replace(ne, \"\")}\\n\\n`, {\n      inline: n\n    }));\n    for (; \"string\" == typeof r[r.length - 1] && !r[r.length - 1].trim();) r.pop();\n    if (null === i.wrapper) return r;\n    const l = i.wrapper || (n ? \"span\" : \"div\");\n    let a;\n    if (r.length > 1 || i.forceWrapper) a = r;else {\n      if (1 === r.length) return a = r[0], \"string\" == typeof a ? d(\"span\", {\n        key: \"outer\"\n      }, a) : a;\n      a = null;\n    }\n    return e.createElement(l, {\n      key: \"outer\"\n    }, a);\n  }\n  function Z(t, n) {\n    const r = n.match(c);\n    return r ? r.reduce(function (n, r, a) {\n      const o = r.indexOf(\"=\");\n      if (-1 !== o) {\n        const c = function (e) {\n            return -1 !== e.indexOf(\"-\") && null === e.match(O) && (e = e.replace(D, function (e, t) {\n              return t.toUpperCase();\n            })), e;\n          }(r.slice(0, o)).trim(),\n          s = function (e) {\n            const t = e[0];\n            return ('\"' === t || \"'\" === t) && e.length >= 2 && e[e.length - 1] === t ? e.slice(1, -1) : e;\n          }(r.slice(o + 1).trim()),\n          d = l[c] || c,\n          u = n[d] = function (e, t, n, r) {\n            return \"style\" === t ? n.split(/;\\s?/).reduce(function (e, t) {\n              const n = t.slice(0, t.indexOf(\":\"));\n              return e[n.trim().replace(/(-[a-z])/g, e => e[1].toUpperCase())] = t.slice(n.length + 1).trim(), e;\n            }, {}) : \"href\" === t || \"src\" === t ? r(n, e, t) : (n.match(M) && (n = n.slice(1, n.length - 1)), \"true\" === n || \"false\" !== n && n);\n          }(t, c, s, i.sanitizer);\n        \"string\" == typeof u && (L.test(u) || B.test(u)) && (n[d] = e.cloneElement(G(u.trim()), {\n          key: a\n        }));\n      } else \"style\" !== r && (n[l[r] || r] = !0);\n      return n;\n    }, {}) : null;\n  }\n  i.overrides = i.overrides || {}, i.sanitizer = i.sanitizer || Ue, i.slugify = i.slugify || Ce, i.namedCodesToUnicode = i.namedCodesToUnicode ? t({}, a, i.namedCodesToUnicode) : a, i.createElement = i.createElement || e.createElement;\n  const q = [],\n    Q = {},\n    V = {\n      [r.blockQuote]: {\n        match: Me(u),\n        order: 1,\n        parse: (e, t, n) => ({\n          children: t(e[0].replace(p, \"\"), n)\n        }),\n        render: (e, t, n) => d(\"blockquote\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.breakLine]: {\n        match: Re(f),\n        order: 1,\n        parse: Pe,\n        render: (e, t, n) => d(\"br\", {\n          key: n.key\n        })\n      },\n      [r.breakThematic]: {\n        match: Me(h),\n        order: 1,\n        parse: Pe,\n        render: (e, t, n) => d(\"hr\", {\n          key: n.key\n        })\n      },\n      [r.codeBlock]: {\n        match: Me(g),\n        order: 0,\n        parse: e => ({\n          lang: void 0,\n          text: e[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\")\n        }),\n        render: (e, n, r) => d(\"pre\", {\n          key: r.key\n        }, d(\"code\", t({}, e.attrs, {\n          className: e.lang ? `lang-${e.lang}` : \"\"\n        }), e.text))\n      },\n      [r.codeFenced]: {\n        match: Me(m),\n        order: 0,\n        parse: e => ({\n          attrs: Z(\"code\", e[3] || \"\"),\n          lang: e[2] || void 0,\n          text: e[4],\n          type: r.codeBlock\n        })\n      },\n      [r.codeInline]: {\n        match: Be(y),\n        order: 3,\n        parse: e => ({\n          text: e[2]\n        }),\n        render: (e, t, n) => d(\"code\", {\n          key: n.key\n        }, e.text)\n      },\n      [r.footnote]: {\n        match: Me(b),\n        order: 0,\n        parse: e => (q.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {}),\n        render: _e\n      },\n      [r.footnoteReference]: {\n        match: Oe(v),\n        order: 1,\n        parse: e => ({\n          target: `#${i.slugify(e[1], Ce)}`,\n          text: e[1]\n        }),\n        render: (e, t, n) => d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(e.target, \"a\", \"href\")\n        }, d(\"sup\", {\n          key: n.key\n        }, e.text))\n      },\n      [r.gfmTask]: {\n        match: Oe($),\n        order: 1,\n        parse: e => ({\n          completed: \"x\" === e[1].toLowerCase()\n        }),\n        render: (e, t, n) => d(\"input\", {\n          checked: e.completed,\n          key: n.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        })\n      },\n      [r.heading]: {\n        match: Me(i.enforceAtxHeadings ? C : w),\n        order: 1,\n        parse: (e, t, n) => ({\n          children: je(t, e[2], n),\n          id: i.slugify(e[2], Ce),\n          level: e[1].length\n        }),\n        render: (e, t, n) => d(`h${e.level}`, {\n          id: e.id,\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.headingSetext]: {\n        match: Me(z),\n        order: 0,\n        parse: (e, t, n) => ({\n          children: je(t, e[1], n),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: r.heading\n        })\n      },\n      [r.htmlBlock]: {\n        match: Re(L),\n        order: 1,\n        parse(e, t, n) {\n          const [, r] = e[3].match(re),\n            i = new RegExp(`^${r}`, \"gm\"),\n            l = e[3].replace(i, \"\"),\n            a = (c = l, we.some(e => e.test(c)) ? He : je);\n          var c;\n          const s = e[1].toLowerCase(),\n            d = -1 !== o.indexOf(s),\n            u = (d ? s : e[1]).trim(),\n            p = {\n              attrs: Z(u, e[2]),\n              noInnerParse: d,\n              tag: u\n            };\n          return n.inAnchor = n.inAnchor || \"a\" === s, d ? p.text = e[3] : p.children = a(t, l, n), n.inAnchor = !1, p;\n        },\n        render: (e, n, r) => d(e.tag, t({\n          key: r.key\n        }, e.attrs), e.text || n(e.children, r))\n      },\n      [r.htmlSelfClosing]: {\n        match: Re(B),\n        order: 1,\n        parse(e) {\n          const t = e[1].trim();\n          return {\n            attrs: Z(t, e[2] || \"\"),\n            tag: t\n          };\n        },\n        render: (e, n, r) => d(e.tag, t({}, e.attrs, {\n          key: r.key\n        }))\n      },\n      [r.htmlComment]: {\n        match: Re(T),\n        order: 1,\n        parse: () => ({}),\n        render: _e\n      },\n      [r.image]: {\n        match: Be(Ee),\n        order: 1,\n        parse: e => ({\n          alt: e[1],\n          target: De(e[2]),\n          title: e[3]\n        }),\n        render: (e, t, n) => d(\"img\", {\n          key: n.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: i.sanitizer(e.target, \"img\", \"src\")\n        })\n      },\n      [r.link]: {\n        match: Oe(Se),\n        order: 3,\n        parse: (e, t, n) => ({\n          children: Ne(t, e[1], n),\n          target: De(e[2]),\n          title: e[3]\n        }),\n        render: (e, t, n) => d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(e.target, \"a\", \"href\"),\n          title: e.title\n        }, t(e.children, n))\n      },\n      [r.linkAngleBraceStyleDetector]: {\n        match: Oe(U),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: r.text\n          }],\n          target: e[1],\n          type: r.link\n        })\n      },\n      [r.linkBareUrlDetector]: {\n        match: (e, t) => t.inAnchor ? null : Oe(R)(e, t),\n        order: 0,\n        parse: e => ({\n          children: [{\n            text: e[1],\n            type: r.text\n          }],\n          target: e[1],\n          title: void 0,\n          type: r.link\n        })\n      },\n      [r.linkMailtoDetector]: {\n        match: Oe(I),\n        order: 0,\n        parse(e) {\n          let t = e[1],\n            n = e[1];\n          return s.test(n) || (n = \"mailto:\" + n), {\n            children: [{\n              text: t.replace(\"mailto:\", \"\"),\n              type: r.text\n            }],\n            target: n,\n            type: r.link\n          };\n        }\n      },\n      [r.orderedList]: ve(d, 1),\n      [r.unorderedList]: ve(d, 2),\n      [r.newlineCoalescer]: {\n        match: Me(k),\n        order: 3,\n        parse: Pe,\n        render: () => \"\\n\"\n      },\n      [r.paragraph]: {\n        match: Ie,\n        order: 3,\n        parse: Fe,\n        render: (e, t, n) => d(\"p\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.ref]: {\n        match: Oe(N),\n        order: 0,\n        parse: e => (Q[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {}),\n        render: _e\n      },\n      [r.refImage]: {\n        match: Be(H),\n        order: 0,\n        parse: e => ({\n          alt: e[1] || void 0,\n          ref: e[2]\n        }),\n        render: (e, t, n) => Q[e.ref] ? d(\"img\", {\n          key: n.key,\n          alt: e.alt,\n          src: i.sanitizer(Q[e.ref].target, \"img\", \"src\"),\n          title: Q[e.ref].title\n        }) : null\n      },\n      [r.refLink]: {\n        match: Oe(F),\n        order: 0,\n        parse: (e, t, n) => ({\n          children: t(e[1], n),\n          fallbackChildren: t(e[0].replace(P, \"\\\\$1\"), n),\n          ref: e[2]\n        }),\n        render: (e, t, n) => Q[e.ref] ? d(\"a\", {\n          key: n.key,\n          href: i.sanitizer(Q[e.ref].target, \"a\", \"href\"),\n          title: Q[e.ref].title\n        }, t(e.children, n)) : d(\"span\", {\n          key: n.key\n        }, t(e.fallbackChildren, n))\n      },\n      [r.table]: {\n        match: Me(j),\n        order: 1,\n        parse: Ae,\n        render(e, t, n) {\n          const r = e;\n          return d(\"table\", {\n            key: n.key\n          }, d(\"thead\", null, d(\"tr\", null, r.header.map(function (e, i) {\n            return d(\"th\", {\n              key: i,\n              style: Te(r, i)\n            }, t(e, n));\n          }))), d(\"tbody\", null, r.cells.map(function (e, i) {\n            return d(\"tr\", {\n              key: i\n            }, e.map(function (e, i) {\n              return d(\"td\", {\n                key: i,\n                style: Te(r, i)\n              }, t(e, n));\n            }));\n          })));\n        }\n      },\n      [r.text]: {\n        match: Re(te),\n        order: 4,\n        parse: e => ({\n          text: e[0].replace(A, (e, t) => i.namedCodesToUnicode[t] ? i.namedCodesToUnicode[t] : e)\n        }),\n        render: e => e.text\n      },\n      [r.textBolded]: {\n        match: Be(X),\n        order: 2,\n        parse: (e, t, n) => ({\n          children: t(e[2], n)\n        }),\n        render: (e, t, n) => d(\"strong\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textEmphasized]: {\n        match: Be(J),\n        order: 3,\n        parse: (e, t, n) => ({\n          children: t(e[2], n)\n        }),\n        render: (e, t, n) => d(\"em\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textEscaped]: {\n        match: Be(ee),\n        order: 1,\n        parse: e => ({\n          text: e[1],\n          type: r.text\n        })\n      },\n      [r.textMarked]: {\n        match: Be(K),\n        order: 3,\n        parse: Fe,\n        render: (e, t, n) => d(\"mark\", {\n          key: n.key\n        }, t(e.children, n))\n      },\n      [r.textStrikethroughed]: {\n        match: Be(Y),\n        order: 3,\n        parse: Fe,\n        render: (e, t, n) => d(\"del\", {\n          key: n.key\n        }, t(e.children, n))\n      }\n    };\n  !0 === i.disableParsingRawHTML && (delete V[r.htmlBlock], delete V[r.htmlSelfClosing]);\n  const ie = function (e) {\n      let t = Object.keys(e);\n      function n(r, i) {\n        let l = [],\n          a = \"\";\n        for (; r;) {\n          let o = 0;\n          for (; o < t.length;) {\n            const c = t[o],\n              s = e[c],\n              d = s.match(r, i, a);\n            if (d) {\n              const e = d[0];\n              r = r.substring(e.length);\n              const t = s.parse(d, n, i);\n              null == t.type && (t.type = c), l.push(t), a = e;\n              break;\n            }\n            o++;\n          }\n        }\n        return l;\n      }\n      return t.sort(function (t, n) {\n        let r = e[t].order,\n          i = e[n].order;\n        return r !== i ? r - i : t < n ? -1 : 1;\n      }), function (e, t) {\n        return n(function (e) {\n          return e.replace(x, \"\\n\").replace(S, \"\").replace(W, \"    \");\n        }(e), t);\n      };\n    }(V),\n    le = (ae = function (e, t) {\n      return function (n, r, i) {\n        const l = e[n.type].render;\n        return t ? t(() => l(n, r, i), n, r, i) : l(n, r, i);\n      };\n    }(V, i.renderRule), function e(t, n = {}) {\n      if (Array.isArray(t)) {\n        const r = n.key,\n          i = [];\n        let l = !1;\n        for (let r = 0; r < t.length; r++) {\n          n.key = r;\n          const a = e(t[r], n),\n            o = \"string\" == typeof a;\n          o && l ? i[i.length - 1] += a : null !== a && i.push(a), l = o;\n        }\n        return n.key = r, i;\n      }\n      return ae(t, e, n);\n    });\n  var ae;\n  const oe = G(n);\n  return q.length ? d(\"div\", null, oe, d(\"footer\", {\n    key: \"footer\"\n  }, q.map(function (e) {\n    return d(\"div\", {\n      id: i.slugify(e.identifier, Ce),\n      key: e.identifier\n    }, e.identifier, le(ie(e.footnote, {\n      inline: !0\n    })));\n  }))) : oe;\n}\nexport default (t => {\n  let {\n      children: r = \"\",\n      options: i\n    } = t,\n    l = function (e, t) {\n      if (null == e) return {};\n      var n,\n        r,\n        i = {},\n        l = Object.keys(e);\n      for (r = 0; r < l.length; r++) t.indexOf(n = l[r]) >= 0 || (i[n] = e[n]);\n      return i;\n    }(t, n);\n  return e.cloneElement(Ze(r, i), l);\n});\nexport { r as RuleType, Ze as compiler, Ue as sanitizer, Ce as slugify };","map":{"version":3,"mappings":"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","names":["RuleType","blockQuote","breakLine","breakThematic","codeBlock","codeFenced","codeInline","footnote","footnoteReference","gfmTask","heading","headingSetext","htmlBlock","htmlComment","htmlSelfClosing","image","link","linkAngleBraceStyleDetector","linkBareUrlDetector","linkMailtoDetector","newlineCoalescer","orderedList","paragraph","ref","refImage","refLink","table","tableSeparator","text","textBolded","textEmphasized","textEscaped","textMarked","textStrikethroughed","unorderedList","Priority","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_TRIM_PIPES","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","match","source","state","prevCapture","isStartOfLine","exec","list","inline","simple","order","parse","capture","start","undefined","items","replace","lastItemWasAParagraph","map","item","i","space","length","spaceRegex","content","isLastItem","thisItemIsAParagraph","indexOf","oldStateInline","oldStateList","adjustedContent","result","render","node","output","key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","slugify","str","parseTableAlignCapture","alignCapture","test","parseTableRow","tableOutput","prevInTable","inTable","tableRow","trim","split","nodes","fragment","push","apply","cells","forEach","trimEnd","parseTable","align","rowText","parseTableCells","header","children","getTableStyle","colIndex","textAlign","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","some","captured","sanitizer","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","cx","args","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","compiler","markdown","options","tag","props","overrideProps","overrides","createElement","override","getTag","_extends","className","compile","input","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","React","attrStringToMap","attributes","raw","index","delimiterIdx","_","letter","toUpperCase","normalizeAttributeKey","slice","value","first","unquote","mappedKey","normalizedValue","sanitizeUrlFn","styles","kvPair","substr","attributeValueToJSXPropValue","cloneElement","footnotes","refs","rules","__","lang","attrs","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","whitespace","trimmer","trimmed","parseFunc","r","tagName","noInnerParse","ast","inAnchor","alt","title","address","fallbackChildren","style","row","c","full","inner","disableParsingRawHTML","ruleList","Object","keys","nestedParse","ruleType","rule","currCaptureString","substring","parsed","sort","typeA","typeB","orderA","orderB","normalizeWhitespace","parserFor","userRender","renderer","createRenderer","renderRule","patchedRender","Array","isArray","oldKey","lastWasString","nodeOut","isString","def","_ref","_objectWithoutPropertiesLoose"],"sources":["/Users/moritzhauschulz/personal_website/moritzhauschulz.github.io/node_modules/markdown-to-jsx/index.tsx"],"sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R =\n  /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, HTML)\n    .split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrlFn(value, tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nexport function sanitizer(url: string): string {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.sanitizer = options.sanitizer || sanitizer\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  options.createElement = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return options.createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          options.sanitizer\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={options.sanitizer(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={options.sanitizer(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={options.sanitizer(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={options.sanitizer(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={options.sanitizer(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div\n                id={options.slugify(def.identifier, slugify)}\n                key={def.identifier}\n              >\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}